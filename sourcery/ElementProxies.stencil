{% for type in types.types where type.name != "Element" and type.name != "Declarations" and type.name != "NamedElement" %}

class {{type.name}}Proxy: {% if type.implements.Type %}TypeProxy,
{% elif type.implements.LeafNode %}LeafNodeProxy,
{% elif type.implements.Requirement %}RequirementProxy,
{% elif type.implements.DeclarationModifier %}DeclarationModifierProxy,
{% elif type.implements.SelfExpression %}SelfExpressionProxy,
{% elif type.implements.LiteralExpression %}LiteralExpressionProxy,
{% elif type.implements.SuperclassExpression %}SuperclassExpressionProxy,
{% elif type.implements.PrimaryExpression %}PrimaryExpressionProxy,
{% elif type.implements.PrefixExpression %}PrefixExpressionProxy,
{% elif type.implements.PostfixExpression %}PostfixExpressionProxy,
{% elif type.implements.Expression %}ExpressionProxy,
{% elif type.implements.Declaration %}DeclarationProxy,
{% elif type.implements.Statement %}StatementProxy,
{% else %}ElementProxy,{% endif %} {{type.name}} {

{% if type.name == "LeafNode" %}
  let managed{{type.name}}: {{type.name}}

  override var text: String {
    set { managed{{type.name}}.text = newValue }
    get { return managed{{type.name}}.text }
  }

{% endif %}
  init(_ element: {{type.name}}) {
{% if type.name == "LeafNode" %}
    managed{{type.name}} = element
{% endif %}
    super.init(element)
  }

  override func accept(_ visitor: ElementVisitor) {
    visitor.visit{{type.name}}(self)
  }
}
{% endfor %}
