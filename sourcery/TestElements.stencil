@testable import SwiftStructureInterface

private let allTypesString = """
class TestClass {
  &inOut;
  try expression;
  expression;
  "literal";
  [0, 1];
  ["test": 123];
  #line;
  #imageLiteral(resourceName: "img");
  expression++;
  self;
  self.identifier;
  self.init;
  self[a: expression];
  super.identifier;
  super.init;
  super[a: expression];
  { [weak self] (argument: Int) in };
  { type, identifier, list in };
  (expression);
  (name: expression);
  .identifier;
  _;
  \\AType.identifier!;
  #selector(expression);
  #keyPath(expression);

  functionCall(a: expression) { };
  expression.init(a:b:);
  expression.0;
  expression.self;
  expression[a:expression];
  expression!;
  optChain?;

  expression as T
  expression ? expression : expression
}

public protocol TestProtocol: Z where A: B, C == D {
  init(a: A)
  var property: String { get }
  func method(paramA: Int, paramB: Int = 0)
  func genericMethod<T: U, V: W & X>()
  subscript()
  typealias T = U
  associatedtype T = U
  mutating func closure(closure: @escaping () -> ()) -> String
  var type: Base.Nested { get }
  var tuple: (a: A, b: B) { get }
  var array: [A] { get }
  var dict: [A: B] { get }
  var opt: A? { get }
  var protocolComp: A & B { get }
  var generic: A<B> { get }
}
"""
{% for type in types.types where type.name != "Declarations" and type.name != "NamedElement" %}
var test{{type.name}}: {{type.name}} {
  return TestElements.instance.test{{type.name}}!
}
{% endfor %}
var allTestElements: [Element] {
  return [
{% for type in types.types where type.name != "Declarations" and type.name != "NamedElement" %}
    test{{type.name}},
{% endfor %}
  ]
}

private class TestElements {
  static let instance = TestElements()

  private init() {
    try! ElementParser.parseFile(allTypesString).accept(Visitor(self))
  }
{% for type in types.types where type.name != "Declarations" and type.name != "NamedElement" %}
  private(set) var test{{type.name}}: {{type.name}}!
{% endfor %}

  private class Visitor: RecursiveElementVisitor {

    let elements: TestElements

    init(_ elements: TestElements) {
      self.elements = elements
    }
{% for type in types.types where type.name != "Declarations" and type.name != "NamedElement" %}

    override func visit{{type.name}}(_ element: {{type.name}}) {
      elements.test{{type.name}} = element
      super.visit{{type.name}}(element)
    }
{% endfor %}
  }
}
