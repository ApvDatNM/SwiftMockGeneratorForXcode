{% for type in types.types where type.name != "Element" and type.name != "Declarations" and type.name != "NamedElement" and type.name != "File" and type.name != "LeafNode" %}
extension {{type.name}} {

  {% for variable in type.variables %}
  public var {{variable.name}}: {{variable.typeName}} {
    {% if variable.isArray %}
    return children.compactMap { $0 as? {{variable.typeName.array.elementTypeName}} }
    {% elif variable.isOptional %}
    return first({{variable.unwrappedTypeName}}.self)
    {% elif variable.type.implements.Element %}
    return first({{variable.typeName}}.self) ?? {{variable.typeName}}Impl.empty{{variable.typeName}}()
    {% else %}
    return first({{variable.typeName}}.self)
    {% endif %}
  }
  {% endfor %}
}
{% endfor %}
